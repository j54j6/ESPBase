#include "network.h"

/*
    Constructor
*/

Network::Network(Filemanager* FM, WiFiManager* wifiManager) //basic Constructor with WifiHandler - no optical output
{
    this->FM = FM;
    this->wifiManager = wifiManager;
    this->logging = SysLogger(FM, "Network");
}

Network::Network(Filemanager* FM, WiFiManager* wifiManager, LED* wifiLed) //Default Constructor with full functionalities
{
    this->FM = FM;
    this->wifiManager = wifiManager;
    this->wifiLed = wifiLed;
    this->logging = SysLogger(FM, "Network");
}

/*
    private functions
*/

bool Network::createConfig() //Fkt Nr. 19
{
    const char* configFileFallback[12][2] = {
            {"ssid", ""},
            {"psk", ""},
            {"wiFiConfigured", "false"},
            {"state", "notConfigured"},
            {"wifiMode", "client"},
            {"wifiState", "true"},
            {"wifiAutoTime", "3600"},
            {"wifiStationDefSSID", "test"},
            {"wifiStationDefPSK", "test"},
            {"hostType", "hidden"},
            {"channel", ""},
            {"bssid", ""}
        };
    bool res = false;
    if(!FM->fExist(configFile))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("createConfig"), F("ConfigFile doesn't exist - try to create"));
        #endif
        for(int i = 0; i < 3; i++)
        {
            FM->createFile(configFile);
            if(FM->fExist(configFile))
            {
                #ifdef J54J6_SysLogger
                    logging.logIt(F("createConfig"), F("File successfully created! - return"));
                #endif
                break;
            }
        }
        if(!FM->fExist(configFile))
        {
            classControl.newReport(F("Can't create Config File - 3 tries failed!"), 43, 4, true);
        }
    }
    
    if(FM->fExist(configFile))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("createConfig"), F("File exist - try to write in File"));
        #endif
        for(int i = 0; i < 3; i++)
        {
            if(FM->writeJsonFile(configFile, configFileFallback, 12))
            {
                #ifdef J54J6_SysLogger
                    logging.logIt(F("createConfig"), F("Successfully created and written in File - Return"));
                #endif
                res = true;
                break;
            }
        }
    }

    if(!res)
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("createConfig"), F("Unable to create Config File - ErrorCode: 119"), 2);
        #endif
        classControl.newReport("Unable to create Config File", 119, 5, true);
        return false;
    }
    else
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("createConfig"), F("ConfigFile successfully created!"));
        #endif
        return true;
    }
}

bool Network::createSetupFile() //Fkt. Nr 120
{
    const char* setupFileFallback[3][2] = {
            {"ssid", "NodeWork-FallbackDevice"},
            {"psk", "3j2!k4ji"},
            {"hostType", "hidden"}
        };
    bool res = false;
    if(!FM->fExist(setupFile))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("createSetupFile"), F("SetupFile doesn't exist - try to create"));
        #endif
        bool res = false;
        for(int i = 0; i < 3; i++)
        {
            FM->createFile(setupFile);
            if(FM->fExist(setupFile))
            {
                res = true;
                #ifdef J54J6_SysLogger
                    logging.logIt(F("createSetupFile"), F("File successfully created! - return"));
                #endif
                break;
            }
        }
        if(!res)
        {
            #ifdef J54J6_SysLogger
                logging.logIt(F("createSetupFile"), F("Can't create setup File - ErrorCode: 234"), 2);
            #endif
            classControl.newReport(F("Can't create setup File"), 234, 6, true);
            return false;
        }
    }
    
    if(FM->fExist(setupFile))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("createSetupFile"), F("File exist - try to write in File"));
        #endif
        for(int i = 0; i < 3; i++)
        {
            if(FM->writeJsonFile(setupFile, setupFileFallback, 3))
            {
                #ifdef J54J6_SysLogger
                    logging.logIt(F("createSetupFile"), F("Successfully created and written in File - Return"));
                #endif
                res = true;
                break;
            }
        }
    }

    if(!res)
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("createSetupFile"), F("Unable to create Setupfile - Can't write in File - ErrorCode: 120"), 2);
        #endif
        classControl.newReport(F("Unable to create Setupfile -  Can't write in File"), 120, 6, true);
        return false;
    }
    else
    {
        #ifdef J54J6_SysLogger
            logging.logIt(F("createSetupFile"), F("Config File successfully created!"));
        #endif
        return true;
    }
}

void Network::startWorking() //fkt. Nr. -3
{
    String staSSID;
    String staPSK;
    if(FM->fExist(configFile))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startWorking"), F("configFileExist"));
        #endif
        staSSID = FM->readJsonFileValue(configFile, "ssid");
        staPSK = FM->readJsonFileValue(configFile, "psk");
    }
    else
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startWorking"), F("No ConfigFile found! - start Setup"), 2);
        #endif
        runFunction = -2;
    }


const char* configFileFallback[12][2] = {
            {"ssid", ""},
            {"psk", ""},
            {"wiFiConfigured", "false"},
            {"state", "notConfigured"},
            {"wifiMode", "STA"},
            {"wifiAutoTime", "3600"},
            {"channel", ""},
            {"bssid", ""},
            {"hostname", ""},
            {"apSSID", ""},
            {"apPSK", ""},
            {"apHide", "hidden"}
        };


    #ifdef J54J6_SysLogger
        
        logging.logIt(F("startWorking"), F("AP successfully started"));
        String message = F("Credentials: ");
        message += " SSID: ";
        message += staSSID;
        message += " PSK: ";
        message += " - ";
        logging.logIt(F("startWorking"), message.c_str());
    #endif

    wifiManager->startWifiStation(staSSID.c_str(), staPSK.c_str());
    runFunction = 2; //updateHostname
}

void Network::startSetupMode() //fkt Nr. -2
{
    Serial.println(F("Start setup"));
    String apSSID;
    String apPSK;
    if(FM->fExist(setupFile))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startSetupMode"), F("setup File exist - read credentials"));
        #endif
        apSSID = FM->readJsonFileValue(setupFile, "ssid");
        apPSK = FM->readJsonFileValue(setupFile, "psk");
    }
    else
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startSetupMode"), F("SetupFile doesnt exist - use default APCredentials"));
        #endif
        apSSID = backupAPSSID;
        apPSK = backupAPPSK;
    }
    
    
    
    if(wifiManager->configWiFiAP(apIpAddress, apIpAddress, apNetMsk))
    {
        #ifdef J54J6_SysLogger
            logging.logIt(F("startSetupMode"), F("AP successfully configured!"));
        #endif
    }
    else
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startSetupMode"), F("Can't configure AP! ERROR-Code: 23"), 2);
        #endif
        classControl.newReport(F("Can't configure AP!"), 23, 5, true);
    }
    delay(150);
    Serial.println(F("##########################################"));
    Serial.println(apSSID.c_str());
    Serial.println(apPSK.c_str());
    if(wifiManager->startWifiAP(apSSID.c_str(), apPSK.c_str()))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startSetupMode"), F("AP successfully started"));
            String message = F("Credentials: \n");
            message += " SSID: ";
            message += apSSID;
            message += "\n PSK: ";
            message += apPSK;
            logging.logIt(F("startSetupMode"), message.c_str());
        #endif
    }
    else
    {
        #ifdef J54J6_SysLogger
            logging.logIt(F("startSetupMode"), F("Can't start AP - ERROR-Code: 24"), 2);
        #endif
        classControl.newReport(F("Can't start AP!"), 24, 5, true);
    }
    delay(200);
    /*
        Start DNS Server
    */
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("startSetupMode"), F("Try starting DNS Server"));
    #endif
    if(startDnsServer())
    {
        #ifdef J54J6_SysLogger
            logging.logIt(F("startSetupMode"), F("DNS Server started!"));
        #endif
    }
    else
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startSetupMode"), F("Can't start DNS Server!"));
        #endif
    }
    delay(500);
    /*
        Start MDNS
    */

   if(startMDnsServer(registerHostname))
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startSetupMode"), F("MDNS Server started!"));
        #endif
    }
    else
    {
        MDNS.addService("http", "tcp", 80);
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startSetupMode"), F("Can't start MDNS Server!"));
        #endif
    }
    delay(500);
    /*
        Start Webserver
    */
    //addService("/", std::bind(&Network::serverHandleSetup, this));
    webserver.on("/", std::bind(&Network::serverHandleSetup, this));
    webserver.on("/cred_save", std::bind(&Network::checkAndTestCredits, this));
    webserver.onNotFound(std::bind(&Network::serverHandleCaptiveNotFound, this));
    //addNotFoundService(std::bind(&Network::serverHandleCaptiveNotFound, this));
    startWebserver(80);
    Serial.println(WiFi.localIP());
    runFunction = -1;
}

/* Private helper function
    
*/

bool Network::startDnsServer() //fkt Nr 5 / direct called in startup
{
    dnsServer.setErrorReplyCode(DNSReplyCode::NoError);
    if(!dnsServer.start(DNSPort, "*", apIpAddress))
    {
        #ifdef J54J6_SysLogger
            logging.logIt(F("startDnsServer"), F("Cant start DNS Server!"), 2);
        #endif
        classControl.newReport(F("Can't start DNS Server!"), 14, 2);
        return false;
    }
    else
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("startDnsServer"), F("DNS Server successfully started!"));
            
        #endif
        return true;
    }
}

bool Network::startMDnsServer(const char* newHostname) //fkt Nr. 4 / direct called in startup
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("startMDnsServer"), F("RUN - startMDnsServer"));
        logging.logIt(F("startMDnsServer"), F("try starting MDNS Service"));
        String message = F("Hostname: ");
        message += newHostname;
        logging.logIt(F("startMDnsServer"), message.c_str());
     #endif
    if(MDNS.begin(newHostname))
    {
        #ifdef J54J6_SysLogger
        
        logging.logIt(F("startMDnsServer"), F("MDNS Server successfully started!"));
        #endif
        return true;
    }
    else
    {
        #ifdef J54J6_SysLogger
        
        logging.logIt(F("startMDnsServer"), F("ERROR Starting MDNS Server"), 2);
        #endif
        classControl.newReport(F("Can't Start MDNS Server"), 16, 2);
        return false;
    }  
}
/*
    Protected functions
*/

void Network::autoResetLock() //internal useage of delay() as sim. threading alternative
{
    if(!locked)
    {
        return;
    }
    else
    {
        if(millis() >= unlockAt)
        {
            locked = false;
            #ifdef J54J6_SysLogger
                
                logging.logIt(F("autoResetLock"), F("unlock run!"));
            #endif
            return;           
        }
        else
        {
            return;
        }   
    }
}

void Network::lock(ulong time) //lock run() - only handling is enabled
{
    #ifdef J54J6_SysLogger
        
        String message = F("lock for ");
        message += time;
        message += "ms";
        logging.logIt(F("autoResetLock"), message.c_str());
    #endif
    locked = true;
    unlockAt = millis() + time;
}

void Network::internalBegin()
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("internalBegin"), F("RUN - begin()"));
        logging.logIt(F("internalBegin"), F("check for Files"));
    #endif
 

    bool res = FM->fExist(configFile);

    #ifdef J54J6_SysLogger
        if(res)
        {
            logging.logIt(F("internalBegin"), F("configFile exist!"));
        }
        else
        {
            logging.logIt(F("internalBegin"), F("configFile doesn't exist - try to create File!"), 1);
        }
    #endif
    
    if(!res)
    {
        for(int i = 0; i < 3; i++)
        {
            if(createConfig())
            {   
                #ifdef J54J6_SysLogger
                    logging.logIt(F("internalBegin"), F("configFile successfully created"), 0);
                #endif
                break;
            }
            else
            {   
                #ifdef J54J6_SysLogger
                    logging.logIt(F("internalBegin"), F("configFile can't be created!"), 1);
                #endif
            } 
        }
        if(!FM->fExist(configFile))
        {
            #ifdef J54J6_SysLogger
                logging.logIt(F("internalBegin"), F("uneable to create configFile - ERRORCODE: 12"), 2);
                logging.logIt(F("internalBegin"), F("disable Network! - ERRORCODE: 12"), 2);
            #endif
            classControl.newReport(F("Can't create Config File!"), 12, 6, true);
        }
    }

    res = FM->fExist(setupFile);

    #ifdef J54J6_SysLogger
        if(res)
        {
            logging.logIt(F("internalBegin"), F("setupFile exist!"));
        }
        else
        {
            logging.logIt(F("internalBegin"), F("setupFile doesn't exist - try to create File!"), 1);
        }
    #endif
    
    if(!res)
    {
        for(int i = 0; i < 3; i++)
        {
            if(createSetupFile())
            {
                #ifdef J54J6_SysLogger 
                    logging.logIt(F("internalBegin"), F("setupFile successfully created"), 0);
                #endif
                if(FM->writeInFile(setupFile, "{\"ssid\" : \"newSensor\",\"psk\" : \"dzujkhgffzojh\",\"hostType\" : \"hidden\"}"))
                {
                    #ifdef J54J6_SysLogger 
                        logging.logIt(F("internalBegin"), F("setupFile successfully filled with default Credentials"), 0);
                    #endif
                    break;
                }
                else
                {
                    #ifdef J54J6_SysLogger 
                        logging.logIt(F("internalBegin"), F("setupFile can't filled with default Credentials"), 0);
                    #endif
                }
                
            }
            else
            {
                #ifdef J54J6_SysLogger 
                    logging.logIt(F("internalBegin"), F("setupFile can't be created!"), 1);
                #endif
            } 
        }
        if(!FM->fExist(setupFile))
        {
            #ifdef J54J6_SysLogger
                logging.logIt(F("internalBegin"), F("uneable to create setupFile - ERRORCODE: 13"), 2);
                logging.logIt(F("internalBegin"), F("disable Network! - ERRORCODE: 13"), 2);
            #endif
            classControl.newReport(F("Can't create Setup File!"), 13, 6, true);
        }
    }


    //Start Setup - all files are created
    const char* wifiConfigured = FM->readJsonFileValue(configFile, "wiFiConfigured");
    res = FM->returnAsBool(FM->readJsonFileValue(configFile, "wiFiConfigured"));
    if(!res)
    {
        #ifdef J54J6_SysLogger
            logging.logIt(F("internalBegin"), F("Network not configured - start in SetupMode"));
            String message = F("Readed Value: ");
            message += wifiConfigured;
            message += " | ";
            message += res;
            logging.logIt(F("internalBegin"), message.c_str());
        #endif

        //define WiFi IP Stuff
        if(wifiManager->setWiFiConfig(apIpAddress, apIpGateway, apNetMsk, dnsIP))
        {
            #ifdef J54J6_SysLogger
                logging.logIt(F("internalBegin"), F("WiFiConfig set!"), 0);
            #endif
        }
        else
        {
            #ifdef J54J6_SysLogger
                logging.logIt(F("internalBegin"), F("can't set WiFiConfig!"), 2);
            #endif
            classControl.newReport(F("Can't set WiFi Config!"), 14, 2, false);
        }



        runFunction = -2; //startSetupMode()
        return;
    }
    else
    {
        #ifdef J54J6_SysLogger
            logging.logIt(F("internalBegin"), F("Network configured - start in WorkMode"));
            String message = F("Readed Value: ");
            message += wifiConfigured;
            message += " | ";
            message += res;
            logging.logIt(F("internalBegin"), message.c_str());
        #endif
        deviceConfigured = true;
        runFunction = -3; //startWorking()
        return;
    }
}


void Network::updateHostname(const char* newHostname)
{
    String toSetHostname;
    if(wifiManager->isConnected())
    {
        if(strcmp(newHostname, "") == 0)
        {
            toSetHostname = wifiManager->getStationMacAsString();
            toSetHostname.replace(":","-");
        }

        if(wifiManager->setWiFiHostname(toSetHostname.c_str()))
        {
            #ifdef J54J6_SysLogger
                logging.logIt(F("updateHostname"), F("Hostname set!"), 0);
            #endif
        }
        else
        {
            #ifdef J54J6_SysLogger
                logging.logIt(F("updateHostname"), "can't set Hostname: " + String(toSetHostname), 2);
            #endif
            classControl.newReport("Can't set WiFi Hostname: " + String(toSetHostname), 14, 2);
        }
        runFunction = 0;
    }
   
}

void Network::serverHandleSetup()
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("serverHandleSetup"), F("setupWebHandler called!"));
    #endif
    webserver.sendHeader(F("Cache-Control"), F("no-cache, no-store, must-revalidate"));
    webserver.sendHeader(F("Pragma"), F("no-cache"));
    webserver.sendHeader(F("Expires"), F("-1"));
    webserver.setContentLength(CONTENT_LENGTH_UNKNOWN);
    // HTML Content
    webserver.send(200, "text/html", setupPageHeader);
    webserver.sendContent(setupPageBodyPart1);
    webserver.sendContent(String(getHTMLFormattedWiFiNetworksForSetupHandler()).c_str());
    webserver.sendContent(setupPageBodyPart2);
}

void Network::checkAndTestCredits()
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("checkAndTestCredits"), F("credits will be checked"));
    #endif
    webserver.send(102); //prevent timeout

    if(!webserver.hasArg("ssid") || webserver.arg("ssid") == "" || !webserver.hasArg("psk") || webserver.arg("psk") == "")
    {
        #ifdef J54J6_SysLogger
        
        logging.logIt(F("checkAndTestCredits"), F("psk or ssid not set"));
        #endif
        webserver.sendHeader("Location", String("http://172.20.0.1?wrongInput=true"), true);
        webserver.send( 302, "text/plain", "");
    }
    if(webserver.arg("psk").length() < 8 || webserver.arg("psk").length() > 64)
    {
        #ifdef J54J6_SysLogger
        
        logging.logIt(F("checkAndTestCredits"), F("psk to long or short"));
        #endif
        webserver.sendHeader(F("Location"), String("http://172.20.0.1?pskfalse=true"), true);
        webserver.send( 302, F("text/plain"), "");
    }
    else
    {
        long startConnectTime = millis();
        uint connectTimeout = 5000;
        wifiManager->setWiFiMode(WIFI_AP_STA);
       ->startWifiStation(webserver.arg("ssid").c_str(), webserver.arg("psk").c_str(), WIFI_AP_STA);
        #ifdef J54J6_SysLogger
        
        String message = F("Try connect with SSID: |");
        message += webserver.arg("ssid").c_str();
        message += F("| and PSk: |");
        message += webserver.arg("psk").c_str();
        message += "|";
        logging.logIt(F("checkAndTestCredits"), message.c_str());
        #endif
        webserver.send(102);
        while(millis() <= (startConnectTime+connectTimeout))
        {
            if(wifiManager->getWiFiState() == 3)
            {
                webserver.sendHeader("Location", String("http://172.20.0.1/?success=true"), true);
                webserver.send( 302, "text/plain", "");
                #ifdef J54J6_SysLogger
                    
                    logging.logIt(F("checkAndTestCredits"), F("Connection successfull"));
                #endif
                break;
            }
            else
            {
                delay(50);
            }           
        }
        if(millis() > (startConnectTime+connectTimeout) || wifiManager->getWiFiState() != 3)
        {
            if(wifiManager->getWiFiState() == 1)
            {
                webserver.sendHeader("Location", String("http://172.20.0.1/?success=nossid"), true);
                webserver.send(302, "text/plain", "");
                #ifdef J54J6_SysLogger
                    
                    logging.logIt(F("checkAndTestCredits"), F("Can't reach SSID anymore"), 1);
                #endif
            }
            else
            {
                webserver.sendHeader("Location", String("http://172.20.0.1/?success=false"), true);
                webserver.send( 302, "text/plain", "");
                #ifdef J54J6_SysLogger
                    
                    logging.logIt(F("checkAndTestCredits"),F("SSID or PSK not correct!"), 1);
                #endif
            }
        }
        else
        {
            if(wifiManager->getWiFiState() == 3)
            {
                #ifdef J54J6_SysLogger
                    
                    logging.logIt(F("checkAndTestCredits"), F("successfully connected to Network - save"));
                #endif
                webserver.sendHeader("Location", String("http://172.20.0.1/?success=true"), true);
                webserver.send( 302, "text/plain", "");
                bool tmp = false;
                if(!saveCredentials(&webserver.arg("ssid"), &webserver.arg("psk"), configFile))
                {
                    #ifdef J54J6_SysLogger
                        
                        logging.logIt(F("checkAndTestCredits"), F("Can't save WiFi credentials - saveCredentials returns false "), 2);
                    #endif
                    tmp = true;
                }
                if(!FM->changeJsonValueFile(configFile, "wiFiConfigured", "true"))
                {
                    #ifdef J54J6_SysLogger
                        logging.logIt(F("checkAndTestCredits"), F("Can't change to configured Network - FM::changeJsonValueFile returns false!"), 2);
                    #endif
                    tmp = true;
                }
                if(!tmp)
                {
                    #ifdef J54J6_SysLogger
                        logging.logIt(F("checkAndTestCredits"), F("Credentials successfully saved!"));
                    #endif
                    delay(1000);
                    ESP.restart();
                }
            }
        }   
    }    
}


void Network::serverHandleCaptiveNotFound()
{
    webserver.sendHeader("Location", String("http://172.20.0.1"), true);
    webserver.send( 302, "text/plain", "");
    return;
}

/*
    Public functions
*/

        /*
            Class Control
        */
void Network::begin() //check for Files and init Network Communication - set as in configFile or setupFile
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("begin"), F("SET - begin()"));
    #endif
    runFunction = 1;
    return;
}

void Network::startSetup() //start Fkt. Nr 2
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("begin"), F("SET - startSetup()"));
    #endif
    runFunction = 2;
    return;
}

void Network::startWifiAP()
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("begin"), F("SET - startWifiAP()"));
    #endif
    runFunction = 3;
    return;
}

void Network::mdnsStart()
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("begin"), F("SET - mDNSStart()"));
    #endif
    runFunction = 4;
    return;
}

void Network::dnsStart()
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("begin"), F("SET - dnsStart()"));
    #endif
    runFunction = 5;
    return;
}


/*
    Get Stuff
*/

bool Network::getClassDisabled()
{
    return this->classDisabled;
}


        /*
            Set Stuff
        */
void Network::setClassDisabled(bool newVal)
{
    #ifdef J54J6_SysLogger
      
      String message = "Update ClassDisabled: ";
      message += classDisabled;
      message += " -> ";
      message += newVal;
      logging.logIt(F("setClassDisabled"), message.c_str());
  #endif
  this->classDisabled = newVal;
}

bool Network::saveCredentials(const String* ssid, const String* psk, const char* File)
{
  if(!FM->fExist(File))
  {
    #ifdef J54J6_SysLogger
      
      logging.logIt(F("saveCredentials"), F("Can't save credentials - File doesn't exist!"), 2);
    #endif
    return false;
  }
  else
  {
    if(!FM->changeJsonValueFile(File, "ssid", ssid->c_str()))
    {
      #ifdef J54J6_SysLogger
          
          logging.logIt(F("saveCredentials"), F("Can't change Json Valie ssid! - function return false"), 2);
      #endif
    }
    if(!FM->changeJsonValueFile(File, "psk", psk->c_str()))
    {
      #ifdef J54J6_SysLogger
          
          logging.logIt(F("saveCredentials"), F("Can't change Json Valie psk! - function return false"), 2);
      #endif
    }
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("saveCredentials"), F("Credentials successfully saved"));
    #endif
    return true;
  }
  return false;
}

/*
    RUN - add to loop() function!
*/
void Network::run()
{
    classControl.run();
    if(millis() < (lastCall + checkDelay))
    {
        return;
    }
    autoResetLock();
    dnsServer.processNextRequest();
    MDNS.update();
    webserver.handleClient();
    if(locked || classDisabled)
    {
        return;
    }
    else
    {
        switch(this->runFunction)
        {
            case -3:
                startWorking();
                break;
            case -2:
                startSetupMode();
                break;
            case 1:
                internalBegin();
                break;
            case 2:
                updateHostname();
                break;
            case 3:
                break;
            case 4:
                break;
            case 5:
                startDnsServer();
                break;
            default:
                break;
        }
    }
    this->lastCall = millis();
    return;
}


/*
    Webserver functionalities
*/

bool Network::startWebserver(int port)
{
    if(!this->webServerActive)
    {
        #ifdef J54J6_SysLogger
        
        logging.logIt(F("startWebserver"), F("Start Webserver"));
        #endif
        webServerActive = true;
        webserver.begin(port);
        return true;
    }
    else
    {
        #ifdef J54J6_SysLogger
        
        logging.logIt(F("startWebserver"), F("Webserver already active - report"), 1);
        #endif

        classControl.newReport(F("Webserver already active!"), 823, 2);
        return false;
    }    
}

bool Network::stopWebserver()
{
    if(this->webServerActive)
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("stopWebserver"), F("Stop Webserver"));
        #endif
        webServerActive = false;
        webserver.stop();
        return true;
    }
    else
    {
        #ifdef J54J6_SysLogger
            
            logging.logIt(F("stopWebserver"), F("Webserver already disabled"), 1);
        #endif
        return false;
    }
    return false;
}

void Network::addService(const char *url, webService function)
{
    #ifdef J54J6_SysLogger
        
        String message = "Add Service: ";
        message += url;
        logging.logIt(F("addService"), message.c_str());
    #endif
    webserver.on(url, function);
}

void Network::addNotFoundService(webService function)
{
    #ifdef J54J6_SysLogger
        
        logging.logIt(F("addNotFoundService"), F("Add NotFound Site!"));
    #endif
    webserver.onNotFound(function);
}

ESP8266WebServer* Network::getWebserver()
{
    return &webserver;
}


/*
    Specific Stuff
*/
        /*
            Setuphandler functions
        */
String Network::getHTMLFormattedWiFiNetworksForSetupHandler()
{
    String part;
    int amountNetworks = WiFi.scanNetworks();
    if(amountNetworks == 0)
    {
        part = F("<li>Keine netzwerke gefunden!</li>");
        return part;
    }
    for(int i = 0; i < amountNetworks; i++)
    {
      part += F("<li><a href='#passwordField' onclick='c(this)'>");
      part += WiFi.SSID(i);
      part += F("</a>");
      part += F("&nbsp;");
      part += F("<span>");
      part += getRSSIasQuality(WiFi.RSSI(i));
      part += F("%</span></li>");
      part += F("<br/>");
    }
    return part;
}

int Network::getRSSIasQuality(int RSSI)
{
  int quality = 0;
  if (RSSI <= -100) {
    quality = 0;
  } else if (RSSI >= -50) {
    quality = 100;
  } else {
    quality = 2 * (RSSI + 100);
  }
  return quality;
}


/*
    Inherited overwritten functionalities
*/
void Network::startClass()
{
    if(this->classDisabled)
    {
        this->classDisabled = false;
        this->begin();
    }
    else
    {
        this->begin();
    }
}

void Network::stopClass()
{
    if(!this->classDisabled)
    {
        this->classDisabled = true;
        this->run();
        Serial.println(F("locked!"));
        return;
    }
}

void Network::pauseClass()
{
    this->stopClass();
}

void Network::restartClass()
{
    this->startClass();
}

void Network::continueClass()
{
    this->startClass();
}