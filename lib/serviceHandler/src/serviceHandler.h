#ifndef J54J6_SERVICEHANDLER_H
#define J54J6_SERVICEHANDLER_H

//include Stuff
//public Libs
#include <Arduino.h> //Basic Lib
#include <ESP8266WiFi.h> //WifiControl
#include <WiFiUdp.h> //base for UDP Manager
#include <ArduinoJson.h> //useage of JSON 

//own Libs
#include "errorHandler.h" //errorHandling to Control the class and report to other classes
#include "filemanager.h" //Filemanager based on LittleFS with Config Addins 
#include "logging.h" //Serial and File Logging
#include "wifiManager.h" //control of Wifi Interface
#include "udpManager.h" //udp Manager to control and receive UDP connection/packets


/*
    ServiceHandler Class

    Basicly an easy way to found other devices with this protocol in Network (mainly for ESP8266 and 32) - 

    This Libary offers the opportunity to discover the Network - you need to define the offerd Services on each device
    All services a device not offers can be automatically (if implemented by the hookup class) searched, saved and used - 

    This Class is as simple as possible but you will see it in the following...

    rules for create a new <<serviceName>>
        - CamelCaseWriting
        - no Space
        - the Name is not "NULL" -> this will be dropped and the service can't be found or saved
        - only ASCII letter/numbers[a-z, A-z][0-9] - tested with only letter and numbers
        - serviceName max. 20 char long - longer works too but it may cause in Problems using LittleFS
        - that's all^^ - you see very easy

    Situation:
        incoming JSON with "request" for <<serviceName>> -> another device want to find a device offering the Service <<servicename>> e.g "webserver" or "mqttserver"
            This Class do:
                -> check the syntax of the JSON (include all important keys and values)
                -> check if this Service is a self-offered Service (this device is host)
                -> check if the Service is saved as an extern Service (because of earlier useage of this service)

                If:
                    Service is local hosted and can be used by extern
                        -> send all Data needed to the requesting device
                else:
                    Service is not local hosted
                        If:
                            service is saved as an external Service
                                -> send the saved data to the other device
                -
                if the Service <<ServiceName>> is not saved as local Offered or external Service return nothing and end

        incoming JSON with "answer" for <<serviceName>> - after sending own request for <<serviceName>>
            This Class do:
                -> check the syntax of the Json (include all important keys and values)
                -> check if this Serivice is already saved as external Serivice (internal Services are "hardcoded" and normally doesnt changed (but it is possible))
                
                If:
                    Service is already saved as external Service (2 Files per Service are possible - main Cfg and Fallback - if Cfg can't be reached )
                        -> end function and drop packet
                else:
                    Service is not saved:
                        -> Try to add the Service and create new File
        
*/


/*
    ####################################
        externalServiceJson Scheme
    ####################################
    JSON-Format:
    {
        "ip" : "<<Address>>",
        "mac" : "<<mac>>",
        "port" : <<port>>,
    }

*/

/*
    ##############################################
        Incoming/Outgoing JSON Messages Scheme
    ##############################################
    JSON Format:
    {
        "type: " : "Request",
        "serviceName" : "<<serviceName>>",
        "MAC" : "<<MAC-Address>>",
        "IP" : "<<ipAddress>> ", //ip of target to prevent delivering to wrong device if broadcast way used - else empty (normal case)
        "servicePort" : "<<Port>>"
        "id" : "<<id>>" //id is randomGenerated by millis()+RandomNumber - used to handle multiple servicerequests if needed (later implemented)
    }
*/

class serviceHandler : public ErrorSlave
{
    private:
        //internal Class Stuff
        const char* className = "serviceHandler"; //for Logging (class Logger.h)
        

        const char* offeredServicesPath = "/config/networkIdent/services.json"; //saved in one File as JSON -  {serviceName : port , serviceName : port , ...}
        const char* externalServicesPath = "/config/serviceHandler/registered/"; //saved in multipleFiles - every Service has its own File with the name <<serviceName>>.json or <<serviceName>>-fallback.json

    protected:
        //internal helper functions



    public:
        //Constructo / Destructor
        serviceHandler(Filemanager* FM, WiFiManager* wifiManager);
        ~serviceHandler();

        //Basic Control



        //get Stuff
        //  for internal useage to get Addresses and Ports
        IPAddress getServiceIP(const char* serviceName);
        String getServiceMAC(const char* serviceName);
        int getServicePort(const char* serviceName);

        
        //savedServiceControl
        /*
            delService
                Delete a saved Service
                if <<internal>> true
                    -> it removes the specified key
                if <<internal>> false
                    -> it removes an external Service (only the specified config - not main and fallback)

                fallback will ignored if <<internal>> is true - 
                    if <<internal>> is false
                    you will delete the file matching the parameters
        */
        bool delService(const char* serviceName, bool delInternalService = true, bool delFallbackConfig = false);


        /*
            changeConfigValue
                changes an existing Config and the specified Value to <<toChangeKey>>
                if changeInternalService "true"
                    an internalService will be changed - <<changeFallback>> will be ignored
                if changeInternalService "false"
                    an existing external Service will changed e.g for manual override - 
                        if <<changeFallback>> "true"
                            -> the fallback Config will be changed
                        else
                            -> the main Config will be changed

                if the File is not existing, the key not 
        */
        bool changeConfigValue(const char* serviceName, const char* toChangeKey, const char* newValue, bool changeInternalService = true, bool changeFallback = false);



        //loop
        void loop();

        /*
        Inherited ErrorHandling

        This are very Basic implementations and will be fixed / better implemented later
       */
        void startClass();
        void stopClass();
        void pauseClass();
        void restartClass();
        void continueClass();
};

#endif