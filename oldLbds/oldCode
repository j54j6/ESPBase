//if service will already searched then Skip other calls
    if(this->serviceAddDelayActive)
    {
        return false;
    }
    //end service will already searched in Network

    //start connecting to MQTT Broker
    logging.logIt("connect - AUTO", "Try to connect to MQTT Broker - read Config", 0);


    //Check for defined MQTT Broker Service - Extrnal and internal
    if(services->checkForService("mqtt", false) == 0 || searchService)
    {
        /*
            No Service defined on the device - try to search in Network for Devices with "NetworkIdent" - by j54j6
        */
        if(!searchService)
        {
            logging.logIt("connect - AUTO", "No MQTT Service defined - try to find Service in Network by Network", 1);
        }
        else
        {
            logging.logIt("connect - AUTO", "MQTT Search Service was poked by Connect - remove Backup CFG - Auto - start Searching for Service", 1);
            if(services->checkForService("mqtt", false) == 3 || services->checkForService("mqtt", false) == 5)
            {
                if(services->delService("mqtt", false, true))
                {
                    logging.logIt("connect - AUTO", "Successfully removed Backup CFG");
                }
                else
                {
                    logging.logIt("connect - AUTO", "Error while removing Backup CFG!", 2);
                } 
            }
        }
        
        /*
        if(mqttHandlerClient.connect(String(wifiManager->getDeviceMac()).c_str())) //check if any other connection is saved in Object e.g via setServer()
        {
            logging.logIt("connect - AUTO", "Successfully connected to in Object defined MQTT Server - return true", 0);
            return true;
        }
        else
        {
            logging.logIt("connect - AUTO", "Can't connect to MQTT Broker - Maybe no Address set?", 0);
            return false;
        }
        */
       this->serviceAddDelayActive = true; //set function in "InSearch" Mode to prevent multipe search requests in single-System
       this->serviceAddDelayTimeout = millis() + 5000; // Set Search Timeout - After Timeout Search Request will canceled
       short deviceFound = 100; //init value for "deviceFound" - 100 is a random number and has no special meaning
        /*
       while(deviceFound != 1 && serviceAddDelayActive) //while no device is found 
       {
           deviceFound = services->autoAddService("mqtt"); //NetworkIdent -> searchDevice in Network with defined "mqtt" device
           if(millis() > serviceAddDelayTimeout) //if the timeour is reached stop searching
           {
               logging.logIt("connectAuto - Search", "Timeout reached - no Device Found");
               serviceAddDelayActive = false;
               break;
           }
           if(deviceFound == 3) 
           {
               logging.logIt("connectAuto - Search", "Service already defined! - SKIP");
               serviceAddDelayActive = false;
               break;
           }
           services->loop();
       }
        */
        /*
        if(serviceAddDelayActive == false && deviceFound != 100)
        {
            String message;
            message = "Network Search timeout reached - No Device Found\nLast State:";
            message += deviceFound;
            logging.logIt("connect - SearchServiceEnd", message.c_str());
            deviceFound = 100;
            return false;
        }       
        else
        {
            return true;
        }
        */
       
        services->autoAddService("mqtt");
    }
    else //MQTT Service defined
    {
       bool connectSuccess = false;
       const char* username = NULL;
       const char* passwd = NULL;
       const char* willTopic = 0;
       const char* willMessage = 0;
       uint8_t willQos = -1;
       bool willRetain = false;
       bool cleanSession = false;
       
       //Set WifiCLient as MQTTClient
       this->mqttHandlerClient.setClient(wifiManager->getRefWiFiClient());

       //Set all Parameters from Config File (defined above) by Config File
       if(FM->fExist(configFile))
       {
           logging.logIt("connect C1", "MQTT Config exist - read needed parameter");   
                            
           const char* valUsername = FM->readJsonFileValue(configFile, "user");

           if(!strcmp(valUsername, "") == 0 || !valUsername)
           {
               username = valUsername;
           }

            const char* valPassword = FM->readJsonFileValue(configFile, "pass");

           if(!strcmp(valPassword, "") == 0 || !valPassword)
           {
               username = valPassword;
           }
           willTopic = this->getWillTopic().c_str();
           willQos = this->getWillQos();
           willMessage = this->getWillMessage().c_str();
           willRetain = this->getWillRetain();
           cleanSession = this->getCleanSession();
       }
        uint sPort = 0;
       for(int serviceTry = 0; serviceTry <= 3; serviceTry++)
       {
           if(connectSuccess)
           {
               return true;
           }
           switch(serviceTry)
           {
                case 1: //Try to connect to main CFG Stuff or internal
                    logging.logIt("connect C1", "Jump In - Servicetry Case 1", -1);        
                    switch(services->checkForService("mqtt", onlyUseExternal))
                    {
                        case 0:
                            logging.logIt("connect C1", "Can't find any defined Service - Try to find MQTT Broker in Network");   
                            break; //End Case 0

                        case 1:
                            sPort = this->services->getServicePort("mqtt", false, true);

                            if(sPort < 1 || sPort > 65535 || !sPort)
                            {
                                sPort = 1883; //default port
                            }
                            this->mqttHandlerClient.setServer("127.0.0.1", sPort);
                            if(this->mqttHandlerClient.connect(WiFi.macAddress().c_str(), username, passwd, willTopic, willQos, willRetain, willMessage, cleanSession))
                            {
                                logging.logIt("connect C1", "Successfully connected to MQTT Broker (localhost)");
                                connectSuccess = true;
                            }
                            else
                            {
                                logging.logIt("connect C1", "Can't connect to MQTT Broker! - only self Offered found and not connectable!");
                                connectSuccess = false;
                            }
                            break; //End Case 1 - only self offered Service found

                        default: //try to connect to Main CFG if defined
                            logging.logIt("connect C2", "Try to connect to Main CFG broker");
                            this->mqttHandlerClient = this->mqttHandlerClient.setServer(IPAddress(services->getServiceIP("mqtt")), int(services->getServicePort("mqtt")));
                            if(this->mqttHandlerClient.connect(WiFi.macAddress().c_str(), username, passwd, willTopic, willQos, willRetain, willMessage, cleanSession))
                            {
                                logging.logIt("connect C1", "Successfully connected to MQTT Broker (Main CFG)");
                                connectSuccess = true;
                            }
                            else
                            {
                                logging.logIt("connect C1", "Can't connect to MQTT Broker! - Main CFG not connectable!");
                                connectSuccess = false;
                            }
                            break; //End Case2 - Connect to Main CFG
                    };
                break; //End Case 1 - try to connect to Main Services

                case 2: //Try to connect to Fallback Services
                    logging.logIt("connect S2", "Jump In - Service try Case 2", -1);    
                    switch(services->checkForService("mqtt", onlyUseExternal))
                    {
                        case 0:
                        case 2:
                            logging.logIt("connect S2", "Can't find any defined Service / Fallback Service - Skip S2 - Try to find MQTT Broker in Network");   
                            break; //End Case 0/2

                        case 1: //Second try to connect to MQTT Service with default port 1883 tcp
                            this->mqttHandlerClient.setServer("127.0.0.1", 1883);
                            if(this->mqttHandlerClient.connect(WiFi.macAddress().c_str(), username, passwd, willTopic, willQos, willRetain, willMessage, cleanSession))
                            {
                                logging.logIt("connect S2", "Successfully connected to MQTT Broker (localhost)");
                                connectSuccess = true;
                            }
                            else
                            {
                                logging.logIt("connect S2", "Can't connect to MQTT Broker! - only self Offered found and not connectable!");
                                connectSuccess = false;
                            }
                            break; //End Case 1 - only self offered Service found

                        case 3: //try to connect to Backup CFG if defined
                        case 5: 
                            logging.logIt("Connect S2-C3/5", "Try to connect to Backup CFG broker");
                            this->mqttHandlerClient.setServer(this->services->getServiceIP("mqtt", true), this->services->getServicePort("mqtt", true));

                            if(this->mqttHandlerClient.connect(WiFi.macAddress().c_str(), username, passwd, willTopic, willQos, willRetain, willMessage, cleanSession))
                            {
                                logging.logIt("Connect S2-C3/5", "Successfully connected to MQTT Broker (Backup CFG)");
                                connectSuccess = true;
                            }
                            else
                            {
                                logging.logIt("Connect S2-C3/5", "Can't connect to MQTT Broker! - Backup CFG not connectable!");
                                connectSuccess = false;
                            }
                            break; //End Case3/5
                    };
                    break; //End Case2 - Connect to Backup CFG

                case 3: //Try to Search another device in Network
                    logging.logIt("connect C3", "Jump In - Servicetry Case 3", -1);   
                    for(int tries = 0; tries <= 2; tries++)
                    {
                        if(this->connect(true, true))
                        {
                            if(tries <= 1)
                            {
                                connectSuccess = connect();
                            }
                            else
                            {
                                connectSuccess = false;
                                break;
                            }
                        }              
                    }
                break; //End Case 3 - Search for new Service in Network
            }//End switch ServiceTry
        } //End For loop
        logging.logIt("connect - Main", "Can't connect to broker - connect Failed!", 1);
        return false;
    } //End Else - try to connect to defined service